#include<obliv.oh>
#include<stdio.h>

#include"desm.h"


obliv float dotprod(obliv float *vec1, obliv float *vec2, int n){

	//Initilize obliv variables
	obliv float sum;
	//Initilize loop-helper
	int i;

	sum = 0;

	for(i = 0; i < n; i = i+1){
		sum = sum + vec1[i]*vec2[i];
	}

	return sum;
}

obliv float computeCosine(obliv float *query, obliv float *doc, int n, obliv float normQ, obliv float normD){

	//Initilize obliv variables
	obliv float dotDoc;
	obliv float result;

	dotDoc = dotprod(query, doc, n);

	result = dotDoc / normQ * normD;

	return result;
}

obliv float computeScore(obliv float **Q, obliv float *D, int n, int Qn, obliv float *normQ, obliv float normD){

	//Initilize obliv variables
	obliv float newCosine;
	obliv float cosine;
	obliv float result;

	//Initilize loop-helper
	int i;

	cosine = 0.0;

	for(i = 0; i < Qn; i = i+1){
		newCosine = computeCosine(Q[i], D, n, normQ[i], normD);
		cosine = cosine + newCosine;
	}

	result = cosine/Qn;

	return result;
}

void load_data(protocolIO *io, float **v, int amount, int n){
	int i, j;
	for (i=0; i < amount; i++){
		for (j=0; j<n; j++){
			v[i][j] = io->vecs[i][j];
		}
	}
}

void toObliv2d(int amount, int n, obliv float **ov, float **v, int party){
	int i, j;
	printf("\ntoObliv2d Party: %d\n", party);
	for (i=0; i<amount; i++){
		for (j=0; j<n; j++){
			ov[i][j] = feedOblivFloat(v[i][j], party);
		}
	}
}

void toObliv1d(int amount, obliv float *ov, float *v, int party){
	int i;
	printf("\ntoObliv1d Party: %d\n", party);
	for(i=0; i<amount; i++){
		ov[i] = feedOblivFloat(v[i], party);
	}
}

void desm(void* args){

	//Get the data from the C-Code
	protocolIO *io = (protocolIO*) args;

	//Initilize & distribute global variables (amount Documents, amount Queries)

	//Amount of Documents and Queries (stays constant)
	//cant be obliv, because they are needed for several loops

	printf("\n-----initilize constants-----\n");

	const int Dm;
	const int Qm;
	const int n;
	//Helper variable for loops 
	int i;

	Dm = ocBroadcastInt(io->m, 1);
	Qm = ocBroadcastInt(io->m, 2);
	n = io->n;


	//allocate the 2-dim. Vector-Arrays (Documents, Queries), need to be obliv!
	
	//After many different apporaches I am (for now) using a Double-pointer
	float **Dt = malloc(Dm*sizeof(float*));
	for(i=0; i<Dm; i++){
		Dt[i] = malloc(n*sizeof(float));
	}

	float **Qt = malloc(Qm*sizeof(float*));
	for(i=0; i<Qm; i++){
		Qt[i] = malloc(n*sizeof(float));
	}

	obliv float **D = malloc(Dm*sizeof(obliv float*));
	for(i=0; i<Dm; i++){
		D[i] = malloc(n*sizeof(obliv float));
	}
	obliv float **Q = malloc(Qm*sizeof(obliv float*));
	for(i=0; i<Qm; i++){
		Q[i] = malloc(n*sizeof(obliv float));
	}

	//Allocate memory to compute/save the euclidean distances locally
	float *normDt = malloc(Dm*sizeof(float));
	float *normQt = malloc(Qm*sizeof(float));
	obliv float *normD = malloc(Dm*sizeof(obliv float));
	obliv float *normQ = malloc(Qm*sizeof(obliv float));


	//convert the 2-Dim. Arrays of the structs to obliv Arrays

	printf("\n-----load data-----\n");

	//assign the data locally (for testing purposes)	
	if(ocCurrentParty()==1){
		load_data(io, Dt, Dm, n);
	}
	if(ocCurrentParty()==2){
		load_data(io, Qt, Qm, n);
	}

	printf("\n-----distribute data-----\n");

	//Use the locally assigned data to assign it to obliv array (using pointers)
	toObliv2d(Dm, n, D, Dt, 1);
	toObliv2d(Qm, n, Q, Qt, 2);

	//Compute euclidean distances locally
	for(i=0; i<Qm; i++){
		normQt[i] = euclid(Qt[i], n);
	}
	for(i=0; i<Dm; i++){
		normDt[i] = euclid(Dt[i], n);
	}

	printf("\n-----distribute norm-----\n");

	//Distribute locally data obliviously
	toObliv1d(Dm, normD, normDt, 1);
	toObliv1d(Qm, normQ, normQt, 2);


	//Compute Scores

	printf("\n-----Compute Scores-----\n");

	//Allocate obliv score-values
	obliv float *score = malloc(sizeof(obliv float) * Dm);

	//Compute (per document-vector) the desm-score (in oblivious fashion)
	for(i=0; i<Dm; i++){
		score[i] = computeScore(Q, D[i], 200, Qm, normQ, normD[i]);
	}

	printf("\n-----Reveal Scores-----\n");

	//Reveal the scores to the 2. Party which provided the query
	for (i = 0; i<Dm; i++){
		revealOblivFloat(&io->scores[i], score[i], 2);
	}
}
