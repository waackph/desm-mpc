#include<obliv.oh>
#include<stdio.h>
#include<math.h>

#include"desm.h"

float euclid(float vec[200], int n){
	float norm = 0;
	int i = 0;
	//int n = sizeof(vec)/sizeof(float);
	for(i = 0; i < n; i = i+1){
		norm = norm + vec[i]*vec[i];
	}
	return sqrt(norm);
}

float dotprod(float vec1[200], float vec2[200], int n){
	float sum = 0;
	int i = 0;
	//int n = sizeof(vec1)/sizeof(float);
	for(i = 0; i < n; i = i+1){
		//printf("%d\n%f\n%f\n\n", i, vec1[i], vec2[i]);
		sum = sum + vec1[i]*vec2[i];
	}
	return sum;
}

float computeCosine(float query[200], float doc[200], int n){
	float dotDoc = dotprod(query, doc, n);
	float normDoc = euclid(doc, n);
	float normQuery = euclid(query, n);
	//printf("%f\n%f\n%f\n", dotDoc, normDoc, normQuery);
	return dotDoc / normQuery * normDoc;
}

float computeScore(float Q[][200], float D[200], int n, int Qn){
	//int Qn = sizeof(Q)/sizeof(float);
	int i;
	float newCosine;
	float cosine = 0.0;
	//printf("%d\n", n);
	//printf("%d\n", Qn);
	for(i = 0; i < Qn; i = i+1){
		newCosine = computeCosine(Q[i], D, n);
		cosine = cosine + newCosine;
	}
	return cosine/Qn;
}

void desm(void* args){
	protocolIO *io = (protocolIO*) args;

	//Initilize & feed obliv variables

	int i;
	
	//allocate the 2-dim. Vector-Arrays (Documents, Queries) (Dn*200)
	if (ocCurrentParty()==1){
		obliv float *D[io->amount];

		for (i = 0; i<Dn; i++){
			D[i] = malloc(sizeof(obliv float) * 200);
		}

		toObliv(io->amount, D, io->vecs, 1);
	}
	if (ocCurrentParty()==2){
		obliv float *Q[io->amount];

		for (i = 0; i<Qn; i++){
			Q[i] = malloc(sizeof(obliv float) * 200);
		}

		toObliv(io->amount, Q, io->vecs, 2);
	}
	
	//Make obliv variables for amount of Documents & Queries
	obliv int Dn = feedOblivInt(io->amount, 1);
	obliv int Qn = feedOblivInt(io->amount, 2);

	//Allocate obliv score-values
	obliv float *score = malloc(sizeof(obliv float)*Dn);

	for(i=0; i<Dn; i++){
		score[i] = computeScore(Q, D[i], 200, Qn);
	}
	io->scores = score;
}

void toObliv(int amount, obliv float ov[][200], float v[][200], int party){
	int i, j;
	for (i=0; i<amount; i++){
		for (j=0; j<200; j++){
			ov[i][j] = feedOblivFloat(v[i][j], party);
		}
	}
}
